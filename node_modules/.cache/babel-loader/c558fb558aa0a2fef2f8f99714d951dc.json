{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\matco\\\\react-apps\\\\todo\\\\src\\\\components\\\\list-item\\\\list-item.js\";\nimport React, { Component } from \"react\";\nimport \"./list-item.css\"; //Компоненты-Классы с внутренним состоянием.\n\nexport default class ListItem extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onLabelClick = () => {\n      console.log(`Done: ${this.props.label}`);\n      this.setState({\n        done: true\n      });\n    };\n\n    this.state = {\n      done: false,\n      important: false\n    };\n  }\n\n  //после того как мы впервый раз проинициализировали state его больше нельзя изменять напрямую. его можно читать как в функции рендер, для того чтобы его изменять нужна функция this.setState\n  render() {\n    const {\n      label\n    } = this.props;\n    const {\n      done,\n      important\n    } = this.state;\n    let classNames = 'todo-list-item';\n\n    if (done) {\n      classNames += ' done';\n    }\n\n    const lispanStyle = {\n      color: important ? '#d43939' : 'black',\n      fontWeight: important ? 'bols' : 'normal'\n    };\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: classNames,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"todo-list-item-label\",\n      style: lispanStyle,\n      onClick: this.onLabelClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, label), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-outline-success btn-sm float-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fa fa-exclamation-circle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-outline-danger btn-sm float-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fa fa-trash-o\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    })));\n  }\n\n} //у Функций нет внутреннего состояния, нам некуда сохранить свойства компонента которые могут изменяться во время работы программы, к примеру счестчик.\n\n/*\r\nconst ListItem = ( { label, important = false} ) => {\r\n\r\n    const lispanStyle = {\r\n        color: important ? '#bf3f3f' : 'black',\r\n        fontWeightw: important ? 'bols' : 'normal',\r\n    }\r\n    return <span>\r\n\r\n        <span\r\n            className=\"todo-list-item-label\"\r\n            style={lispanStyle}>\r\n            {label}\r\n        </span>\r\n\r\n        <button type=\"button\"\r\n                className=\"btn btn-outline-success btn-sm float-right\">\r\n            <i className=\"fa fa-exclamation-circle\" />\r\n        </button>\r\n        <button type=\"button\"\r\n                className=\"btn btn-outline-danger btn-sm float-right\">\r\n            <i className=\"fa fa-trash-o\" />\r\n        </button>\r\n\r\n\r\n    </span>\r\n}\r\n\r\nexport default ListItem\r\n*/","map":{"version":3,"sources":["C:/Users/matco/react-apps/todo/src/components/list-item/list-item.js"],"names":["React","Component","ListItem","onLabelClick","console","log","props","label","setState","done","state","important","render","classNames","lispanStyle","color","fontWeight"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,iBAAP,C,CAEA;;AAEA,eAAe,MAAMC,QAAN,SAAuBD,SAAvB,CAAiC;AAAA;AAAA;;AAAA,SAkB5CE,YAlB4C,GAkB7B,MAAM;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAa,SAAQ,KAAKC,KAAL,CAAWC,KAAM,EAAtC;AACA,WAAKC,QAAL,CAAc;AACVC,QAAAA,IAAI,EAAE;AADI,OAAd;AAGH,KAvB2C;;AAAA,SA0B5CC,KA1B4C,GA0BpC;AACJD,MAAAA,IAAI,EAAE,KADF;AAEJE,MAAAA,SAAS,EAAE;AAFP,KA1BoC;AAAA;;AA8B5C;AAEAC,EAAAA,MAAM,GAAG;AAEL,UAAM;AAAEL,MAAAA;AAAF,QAAW,KAAKD,KAAtB;AAEA,UAAM;AAAEG,MAAAA,IAAF;AAAQE,MAAAA;AAAR,QAAsB,KAAKD,KAAjC;AACA,QAAIG,UAAU,GAAG,gBAAjB;;AACA,QAAIJ,IAAJ,EAAU;AACNI,MAAAA,UAAU,IAAI,OAAd;AACH;;AAGD,UAAMC,WAAW,GAAG;AAChBC,MAAAA,KAAK,EAAEJ,SAAS,GAAG,SAAH,GAAe,OADf;AAEhBK,MAAAA,UAAU,EAAEL,SAAS,GAAG,MAAH,GAAY;AAFjB,KAApB;AAIA,wBAAO;AAAM,MAAA,SAAS,EAAEE,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACP;AACI,MAAA,SAAS,EAAC,sBADd;AAEI,MAAA,KAAK,EAAEC,WAFX;AAGI,MAAA,OAAO,EAAG,KAAKX,YAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMKI,KANL,CADO,eAUP;AAAQ,MAAA,IAAI,EAAC,QAAb;AACQ,MAAA,SAAS,EAAC,4CADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI;AAAG,MAAA,SAAS,EAAC,0BAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAVO,eAcP;AAAQ,MAAA,IAAI,EAAC,QAAb;AACQ,MAAA,SAAS,EAAC,2CADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI;AAAG,MAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAdO,CAAP;AAqBH;;AApE2C,C,CAuEhD;;AACA","sourcesContent":["import React, {Component} from \"react\";\r\nimport \"./list-item.css\";\r\n\r\n//Компоненты-Классы с внутренним состоянием.\r\n\r\nexport default class ListItem extends Component {\r\n    //1 метод\r\n    //функция на прототипе работает только с bind\r\n    // onLabelClick() {\r\n    //     console.log(`Done: ${this.props.label}`)\r\n    // }\r\n\r\n    //2 метод консервативный\r\n    // constructor() {\r\n    //     super();\r\n    //     /*создадим функцую не на прототипе, а на самом объекте и объявим как функцию стрелку чтобы this сохранялся правильно*/\r\n    //     this.onLabelClick = () => {\r\n    //         console.log(`Done: ${this.props.label}`)\r\n    //     }\r\n    // }\r\n\r\n    //3 метод\r\n    //поле-класса в пропосиле 3 есть class-fields равносильно тому что мы сделали в конструкторе, там мы объявляли функцию в конструкторе\r\n    onLabelClick = () => {\r\n        console.log(`Done: ${this.props.label}`)\r\n        this.setState({\r\n            done: true\r\n        })\r\n    }\r\n    //мы кликаем на элемент label срабатывает функция onLabelClick - она выполняет setState, setState говорит состояние компонента именилась и React заново вызывает функцию render, функция рендер возвраает новую структуру для нашего компонента, Реакт запускает реконсилейшен алгоритм и находит что изменился только класс, и обновляет егов DOM дереве\r\n\r\n    state = {\r\n        done: false,\r\n        important: false\r\n    }\r\n    //после того как мы впервый раз проинициализировали state его больше нельзя изменять напрямую. его можно читать как в функции рендер, для того чтобы его изменять нужна функция this.setState\r\n\r\n    render() {\r\n\r\n        const { label} = this.props\r\n\r\n        const { done, important } = this.state\r\n        let classNames = 'todo-list-item'\r\n        if (done) {\r\n            classNames += ' done'\r\n        }\r\n\r\n\r\n        const lispanStyle = {\r\n            color: important ? '#d43939' : 'black',\r\n            fontWeight: important ? 'bols' : 'normal',\r\n        }\r\n        return <span className={classNames}>\r\n        <span\r\n            className=\"todo-list-item-label\"\r\n            style={lispanStyle}\r\n            onClick={ this.onLabelClick }>\r\n            {/*onClick={ this.onLabelClick.bind(this) }> не красиво так привязывать намертво к this - создается новая функция которую оборачивает bind*/}\r\n            {/*мы передаем функцию а не вызываем, без (), иначе выведет undefande*/}\r\n            {label}\r\n        </span>\r\n\r\n        <button type=\"button\"\r\n                className=\"btn btn-outline-success btn-sm float-right\">\r\n            <i className=\"fa fa-exclamation-circle\"/>\r\n        </button>\r\n        <button type=\"button\"\r\n                className=\"btn btn-outline-danger btn-sm float-right\">\r\n            <i className=\"fa fa-trash-o\"/>\r\n        </button>\r\n\r\n\r\n    </span>\r\n    }\r\n}\r\n\r\n//у Функций нет внутреннего состояния, нам некуда сохранить свойства компонента которые могут изменяться во время работы программы, к примеру счестчик.\r\n/*\r\nconst ListItem = ( { label, important = false} ) => {\r\n\r\n    const lispanStyle = {\r\n        color: important ? '#bf3f3f' : 'black',\r\n        fontWeightw: important ? 'bols' : 'normal',\r\n    }\r\n    return <span>\r\n\r\n        <span\r\n            className=\"todo-list-item-label\"\r\n            style={lispanStyle}>\r\n            {label}\r\n        </span>\r\n\r\n        <button type=\"button\"\r\n                className=\"btn btn-outline-success btn-sm float-right\">\r\n            <i className=\"fa fa-exclamation-circle\" />\r\n        </button>\r\n        <button type=\"button\"\r\n                className=\"btn btn-outline-danger btn-sm float-right\">\r\n            <i className=\"fa fa-trash-o\" />\r\n        </button>\r\n\r\n\r\n    </span>\r\n}\r\n\r\nexport default ListItem\r\n*/"]},"metadata":{},"sourceType":"module"}