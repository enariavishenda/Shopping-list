{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\matco\\\\react-apps\\\\todo\\\\src\\\\components\\\\app\\\\app.js\";\nimport React, { Component } from 'react';\nimport AppHeader from \"../app-header\";\nimport TodoList from \"../todo-list\";\nimport SearchPanel from \"../search-panel\";\nimport Footer from \"../footer\";\nimport ItemStatusFilter from \"../item-status-filter\";\nimport AddItem from \"../item-add-form/item-add-form\";\nimport './app.css';\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      todoData: [this.createTodoItem('кровать'), this.createTodoItem('трубы в ванную и кухню'), this.createTodoItem('туалет'), this.createTodoItem('кран с душем в ванную')]\n    };\n\n    this.deleteListItem = id => {\n      console.log(id);\n      this.setState(({\n        todoData\n      }) => {\n        const id_i = todoData.findIndex(el => el.id === id);\n        console.log('id_i ' + id_i); //неьзя изменять сам TodoData, нужно создать копию, без элемента id_i, не изменяя существующий массив, нельзя изменять существующий State\n        //[a, b, c, d, e]\n        //[a, b,    d, e]\n\n        const before = todoData.splice(0, id_i); // [ a, b ]\n\n        const after = todoData.splice(id_i + 1); // [ d, e ]\n\n        const newTodoData = [...before, ...after]; // [ a, b, d, e]\n        //вернем новый массив\n\n        return {\n          todoData: newTodoData\n        }; //неизменность State\n      });\n    };\n\n    this.maxId = 100;\n\n    this.addItemList = text => {\n      console.log('Item list added in App Component', text); //нужно сформировать объект {label: 'Кровать', important: false, id: 1}, label приходит с формы, important по умолчанию false,  а вот id нужно сгенерить\n      //generate id ?\n\n      const newItem = this.createTodoItem(text);\n      this.setState(({\n        todoData\n      }) => {\n        //add element in array ?\n        const newItemData = [...todoData, newItem];\n        return {\n          todoData: newItemData\n        };\n      });\n    };\n\n    this.onDone = id => {\n      console.log('Toggle Done', id);\n    };\n\n    this.onImportant = id => {\n      return console.log(id);\n    };\n  }\n\n  createTodoItem(label) {\n    return {\n      label,\n      important: false,\n      done: false,\n      id: this.maxId++\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"todo-app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(AppHeader, {\n      toDo: this.onDone(),\n      done: this.onImportant(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"top-panel d-flex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(SearchPanel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(ItemStatusFilter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(TodoList, {\n      todos: this.state.todoData,\n      onDel: this.deleteListItem //когда мы кликаем на кнопку(событие кнопки) в List-Item, мы вызываем функцию которую нам передал Todo-List, Todo-List в свою очередь вызывает функцию. которую передал App, таким образом App узнает о том, что один из List-Item решил удалиться (его id). Теперь нам нужно состояние App, чтобы он состояние компонента именилась и React заново вызывает функцию render, функция рендер возвраает новую структуру для нашего компонента, Реакт запускает реконсилейшен алгоритм и находит что изменился только класс, и обновляет егов DOM дереве\n      ,\n      onToggleImportant: this.onImportant,\n      onToggleDone: this.onDone,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(AddItem, {\n      onAdd: this.addItemList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/matco/react-apps/todo/src/components/app/app.js"],"names":["React","Component","AppHeader","TodoList","SearchPanel","Footer","ItemStatusFilter","AddItem","App","state","todoData","createTodoItem","deleteListItem","id","console","log","setState","id_i","findIndex","el","before","splice","after","newTodoData","maxId","addItemList","text","newItem","newItemData","onDone","onImportant","label","important","done","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,gBAAP,MAA6B,uBAA7B;AACA,OAAOC,OAAP,MAAoB,gCAApB;AAEA,OAAO,WAAP;AAEA,eAAe,MAAMC,GAAN,SAAkBP,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAWvCQ,KAXuC,GAWjC;AACFC,MAAAA,QAAQ,EAAG,CACP,KAAKC,cAAL,CAAoB,SAApB,CADO,EAEP,KAAKA,cAAL,CAAoB,wBAApB,CAFO,EAGP,KAAKA,cAAL,CAAoB,QAApB,CAHO,EAIP,KAAKA,cAAL,CAAoB,uBAApB,CAJO;AADT,KAXiC;;AAAA,SAoBvCC,cApBuC,GAoBrBC,EAAD,IAAQ;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AACA,WAAKG,QAAL,CAAc,CAAC;AAAEN,QAAAA;AAAF,OAAD,KAAkB;AAE5B,cAAMO,IAAI,GAAGP,QAAQ,CAACQ,SAAT,CAAoBC,EAAD,IAAQA,EAAE,CAACN,EAAH,KAAUA,EAArC,CAAb;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAUE,IAAtB,EAH4B,CAI5B;AACA;AACA;;AACA,cAAMG,MAAM,GAAGV,QAAQ,CAACW,MAAT,CAAgB,CAAhB,EAAmBJ,IAAnB,CAAf,CAP4B,CAOY;;AACxC,cAAMK,KAAK,GAAGZ,QAAQ,CAACW,MAAT,CAAgBJ,IAAI,GAAG,CAAvB,CAAd,CAR4B,CAQY;;AACxC,cAAMM,WAAW,GAAG,CAAE,GAAGH,MAAL,EAAa,GAAGE,KAAhB,CAApB,CAT4B,CASiB;AAC7C;;AACA,eAAO;AACHZ,UAAAA,QAAQ,EAAEa;AADP,SAAP,CAX4B,CAc5B;AACH,OAfD;AAgBH,KAtCsC;;AAAA,SAwCvCC,KAxCuC,GAwC/B,GAxC+B;;AAAA,SA2CvCC,WA3CuC,GA2CxBC,IAAD,IAAU;AACpBZ,MAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgDW,IAAhD,EADoB,CAEpB;AACA;;AACA,YAAMC,OAAO,GAAG,KAAKhB,cAAL,CAAoBe,IAApB,CAAhB;AAEA,WAAKV,QAAL,CAAc,CAAC;AAACN,QAAAA;AAAD,OAAD,KAAgB;AAC1B;AACA,cAAMkB,WAAW,GAAG,CAAE,GAAGlB,QAAL,EAAeiB,OAAf,CAApB;AACA,eAAO;AACHjB,UAAAA,QAAQ,EAAEkB;AADP,SAAP;AAGH,OAND;AAOH,KAxDsC;;AAAA,SA0DvCC,MA1DuC,GA0D7BhB,EAAD,IAAQ;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BF,EAA1B;AAEH,KA7DsC;;AAAA,SA+DvCiB,WA/DuC,GA+DxBjB,EAAD,IAAQ;AACnB,aAAOC,OAAO,CAACC,GAAR,CAAYF,EAAZ,CAAP;AACF,KAjEsC;AAAA;;AAEvCF,EAAAA,cAAc,CAACoB,KAAD,EAAQ;AAClB,WAAO;AACHA,MAAAA,KADG;AAEHC,MAAAA,SAAS,EAAE,KAFR;AAGHC,MAAAA,IAAI,EAAE,KAHH;AAIHpB,MAAAA,EAAE,EAAE,KAAKW,KAAL;AAJD,KAAP;AAMH;;AA2DDU,EAAAA,MAAM,GAAI;AACN,wBACI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAE,KAAKL,MAAL,EAAjB;AAAgC,MAAA,IAAI,EAAE,KAAKC,WAAL,EAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,eAEA;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAFA,eAOA,oBAAC,QAAD;AACI,MAAA,KAAK,EAAE,KAAKrB,KAAL,CAAWC,QADtB;AAEI,MAAA,KAAK,EAAE,KAAKE,cAFhB,CAGI;AAHJ;AAII,MAAA,iBAAiB,EAAE,KAAKkB,WAJ5B;AAKI,MAAA,YAAY,EAAE,KAAKD,MALvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPA,eAcA,oBAAC,OAAD;AAAS,MAAA,KAAK,EAAE,KAAKJ,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdA,eAeA,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfA,CADJ;AAoBH;;AAzFsC","sourcesContent":["import React, { Component } from 'react';\r\nimport AppHeader from \"../app-header\";\r\nimport TodoList from \"../todo-list\";\r\nimport SearchPanel from \"../search-panel\";\r\nimport Footer from \"../footer\";\r\nimport ItemStatusFilter from \"../item-status-filter\";\r\nimport AddItem from \"../item-add-form/item-add-form\";\r\n\r\nimport './app.css';\r\n\r\nexport default class App extends Component {\r\n\r\n    createTodoItem(label) {\r\n        return {\r\n            label,\r\n            important: false,\r\n            done: false,\r\n            id: this.maxId++\r\n        }\r\n    }\r\n\r\n    state={\r\n        todoData : [\r\n            this.createTodoItem('кровать'),\r\n            this.createTodoItem('трубы в ванную и кухню'),\r\n            this.createTodoItem('туалет'),\r\n            this.createTodoItem('кран с душем в ванную'),\r\n        ]\r\n    }\r\n\r\n    deleteListItem = (id) => {\r\n        console.log(id)\r\n        this.setState(({ todoData }) => {\r\n\r\n            const id_i = todoData.findIndex((el) => el.id === id);\r\n            console.log('id_i ' + id_i)\r\n            //неьзя изменять сам TodoData, нужно создать копию, без элемента id_i, не изменяя существующий массив, нельзя изменять существующий State\r\n            //[a, b, c, d, e]\r\n            //[a, b,    d, e]\r\n            const before = todoData.splice(0, id_i) // [ a, b ]\r\n            const after = todoData.splice(id_i + 1) // [ d, e ]\r\n            const newTodoData = [ ...before, ...after ]; // [ a, b, d, e]\r\n            //вернем новый массив\r\n            return {\r\n                todoData: newTodoData\r\n            }\r\n            //неизменность State\r\n        })\r\n    }\r\n\r\n    maxId = 100;\r\n    //генерит айдишки сервер, поэтому мы просто взяли 100\r\n\r\n    addItemList = (text) => {\r\n        console.log('Item list added in App Component', text)\r\n        //нужно сформировать объект {label: 'Кровать', important: false, id: 1}, label приходит с формы, important по умолчанию false,  а вот id нужно сгенерить\r\n        //generate id ?\r\n        const newItem = this.createTodoItem(text)\r\n\r\n        this.setState(({todoData}) => {\r\n            //add element in array ?\r\n            const newItemData = [ ...todoData, newItem]\r\n            return {\r\n                todoData: newItemData\r\n            }\r\n        })\r\n    }\r\n\r\n    onDone = (id) => {\r\n        console.log('Toggle Done',id)\r\n\r\n    }\r\n\r\n    onImportant = (id) => {\r\n       return console.log(id)\r\n    }\r\n\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"todo-app\">\r\n            <AppHeader toDo={this.onDone()} done={this.onImportant()}/>\r\n            <div className=\"top-panel d-flex\">\r\n                <SearchPanel/>\r\n                <ItemStatusFilter/>\r\n            </div>\r\n\r\n            <TodoList\r\n                todos={this.state.todoData}\r\n                onDel={this.deleteListItem}\r\n                //когда мы кликаем на кнопку(событие кнопки) в List-Item, мы вызываем функцию которую нам передал Todo-List, Todo-List в свою очередь вызывает функцию. которую передал App, таким образом App узнает о том, что один из List-Item решил удалиться (его id). Теперь нам нужно состояние App, чтобы он состояние компонента именилась и React заново вызывает функцию render, функция рендер возвраает новую структуру для нашего компонента, Реакт запускает реконсилейшен алгоритм и находит что изменился только класс, и обновляет егов DOM дереве\r\n                onToggleImportant={this.onImportant}\r\n                onToggleDone={this.onDone}\r\n            />\r\n            <AddItem onAdd={this.addItemList}/>\r\n            <Footer/>\r\n        </div>\r\n        )\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}